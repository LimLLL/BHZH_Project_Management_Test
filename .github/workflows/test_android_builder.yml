name: 'Test Android Build and Publish'
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'version.json'  # 只在 version.json 更改时触发

      
jobs:
  publish-android:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf unzip

      - name: Get Gitea source code
        env:
          GITEA_TOKEN: ${{ secrets.GITEA_ACCESS_TOKEN }}
          GITEA_REPO_URL: ${{ secrets.GITEA_REPO_URL }}
        run: |
          # 克隆 Gitea 仓库（使用 token 进行认证）
          git clone -b test https://${GITEA_TOKEN}@${GITEA_REPO_URL#https://} source_code
          
          # 复制所有需要的文件到当前工作目录
          cp -r source_code/* .

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install NDK
        run: sdkmanager "ndk;27.0.11902837"

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

      - name: Install dependencies
        run: pnpm install

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: rust-cache-${{ runner.os }}-build

      - name: Build app bundle
        run: |
          pnpm tauri android build --target aarch64
        env:
          NDK_HOME: ${{ env.ANDROID_HOME }}/ndk/27.0.11902837
          NODE_ENV: test

      - name: Extract android signing key from env
        run: |
          echo "${{ secrets.ANDROID_RELEASE_KEYSTORE }}" > src-tauri/gen/android/release.jks.base64
          base64 -d src-tauri/gen/android/release.jks.base64 > src-tauri/gen/android/release.decrypted.jks

      - name: Sign APK
        run: |
          ${{ env.ANDROID_HOME }}/build-tools/34.0.0/apksigner sign --ks src-tauri/gen/android/release.decrypted.jks \
            --ks-key-alias ${{ secrets.ANDROID_RELEASE_KEY }} \
            --ks-pass pass:${{ secrets.ANDROID_RELEASE_PASSWORD }} \
            --key-pass pass:${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }} \
            --out src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-signed.apk \
            src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-unsigned.apk

      - name: Get Node project version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Rename APK file
        run: |
          mv ./src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-signed.apk ./src-tauri/gen/android/app/build/outputs/apk/universal/release/BHZH_Project_Management_${{steps.package-version.outputs.current-version}}_aarch64.apk

      - name: Add APK to pending release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${GITHUB_REPOSITORY}"  # Use the GITHUB_REPOSITORY environment variable
          
          # Find the latest release draft
          RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${REPO}/releases" | \
            jq -r '[.[] | select(.draft == true)][0].id')
        
          if [ -z "$RELEASE_ID" ]; then
            echo "No draft release found"
            exit 1
          fi
          
          curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@./src-tauri/gen/android/app/build/outputs/apk/universal/release/BHZH_Project_Management_${{steps.package-version.outputs.current-version}}_aarch64.apk" \
              "https://uploads.github.com/repos/${REPO}/releases/$RELEASE_ID/assets?name=BHZH_Project_Management_${{steps.package-version.outputs.current-version}}_aarch64.apk"
